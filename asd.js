var MLPClassifier = function(hidden, output, layers, weights, bias) {

    this.hidden = hidden.toUpperCase();
    this.output = output.toUpperCase();
    this.network = new Array(layers.length + 1);
    for (var i = 0, l = layers.length; i < l; i++) {
        this.network[i + 1] = new Array(layers[i]).fill(0.);
    }
    this.weights = weights;
    this.bias = bias;

    var compute = function(activation, v) {
        switch (activation) {
            case 'LOGISTIC':
                for (var i = 0, l = v.length; i < l; i++) {
                    v[i] = 1. / (1. + Math.exp(-v[i]));
                }
                break;
            case 'RELU':
                for (var i = 0, l = v.length; i < l; i++) {
                    v[i] = Math.max(0, v[i]);
                }
                break;
            case 'TANH':
                for (var i = 0, l = v.length; i < l; i++) {
                    v[i] = Math.tanh(v[i]);
                }
                break;
            case 'SOFTMAX':
                var max = Number.NEGATIVE_INFINITY;
                for (var i = 0, l = v.length; i < l; i++) {
                    if (v[i] > max) {
                        max = v[i];
                    }
                }
                for (var i = 0, l = v.length; i < l; i++) {
                    v[i] = Math.exp(v[i] - max);
                }
                var sum = 0.0;
                for (var i = 0, l = v.length; i < l; i++) {
                    sum += v[i];
                }
                for (var i = 0, l = v.length; i < l; i++) {
                    v[i] /= sum;
                }
                break;
        }
        return v;
    };

    this.predict = function(neurons) {
        this.network[0] = neurons;

        for (var i = 0; i < this.network.length - 1; i++) {
            for (var j = 0; j < this.network[i + 1].length; j++) {
                this.network[i + 1][j] = this.bias[i][j];
                for (var l = 0; l < this.network[i].length; l++) {
                    this.network[i + 1][j] += this.network[i][l] * this.weights[i][l][j];
                }
            }
            if ((i + 1) < (this.network.length - 1)) {
                this.network[i + 1] = compute(this.hidden, this.network[i + 1]);
            }
        }
        this.network[this.network.length - 1] = compute(this.output, this.network[this.network.length - 1]);

        if (this.network[this.network.length - 1].length == 1) {
            if (this.network[this.network.length - 1][0] > .5) {
                return 1;
            }
            return 0;
        } else {
            var classIdx = 0;
            for (var i = 0, l = this.network[this.network.length - 1].length; i < l; i++) {
                classIdx = this.network[this.network.length - 1][i] > this.network[this.network.length - 1][classIdx] ? i : classIdx;
            }
            return classIdx;
        }

    };

};

if (typeof process !== 'undefined' && typeof process.argv !== 'undefined') {
    if (process.argv.length - 2 === 40) {

        // Features:
        var features = process.argv.slice(2);

        // Parameters:
        const layers = [5, 4, 6];
        const weights = [[[0.09683875594596138, 0.13955216642671686, -0.004831257794160661, 0.6570313803933325, 0.22543003735009765], [-0.03992266243101807, 0.6601342602210881, -0.3442934513731299, -0.0991338976816946, 0.14322793841307066], [-0.5677250243625583, 0.5182751073501644, -0.34533400381904905, 0.03986707146599575, -0.11691117965417151], [-0.3680573410085075, 0.12129133286544987, -0.45901480720925364, -0.08585258406177292, -0.17529146417074246], [-0.3119365976993796, 0.27974496432078727, -0.5360327511536163, -0.14493346774684587, 0.01179430853041252], [-0.5244428083176443, 0.23510006642829998, -0.48981058829212576, 0.12053115412090881, 0.35033401675774156], [-0.06243396999891413, 0.14525242610515582, -0.35479019985232757, -0.15466301213217587, 0.29016913201228234], [-0.124594055773011, 0.19587092239170117, -0.6744555304653526, 0.0008471700527127835, 0.025726254900353202], [0.0915814817214987, 0.0957409880508991, 0.21268690937711418, -0.01687983796777413, -0.18124295566444087], [-1.0545162271449227, 1.07206660093791, -0.16678148736301687, -0.2616199295034542, 0.1901893327348636], [-0.6453050372787767, 0.8483577525647894, -0.0010228391610620198, -0.390984782957983, -0.0006637810085799418], [0.48069999991277007, 0.5307495277719193, -1.150616678935308, 0.43494718122068093, -0.24366257172029424], [-0.28912738311997616, 0.12645469108211294, -0.38854641829546893, -0.1683684328937006, 0.05285414373716967], [0.06268824180430775, -0.014493183655775664, 0.10858638295077018, -0.08178718323522943, 0.32155300248197966], [-0.02489817656960044, -0.02502851498878799, -0.30594766100086435, 0.26405358510092464, 0.1210429046308239], [0.23503280125085962, 0.21142791839596134, 0.3477442859342451, -0.16506107836221803, -0.005619583912757454], [-0.26688394496719925, 0.2659312261322582, -0.12216542836671948, 0.37789105511558685, -0.2159839737591268], [0.09177281688785495, -0.10199182611477292, -0.0938722683368008, 0.19203243858332228, 0.23180068306719748], [-0.27557718791516694, -0.35858110804478166, 0.2451376396753875, 0.14893012709162667, 0.1002301636056568], [-0.14624183355383594, -0.32811731466670624, -0.03507383442659032, 0.16144005996892674, -0.19992681098658657], [0.31513636410715623, -0.1248018906463104, -0.31917432373425986, 0.23328390149480258, -0.32260172054259834], [0.19122661095623322, -0.259264381878671, -0.1706888510788007, -0.045946927401994846, -0.17883703412887325], [0.35782631002561666, 0.07387766895907052, 0.0018351092314587865, -0.15453863945877105, 0.3169219149728048], [0.09736886042041186, 0.024226005858367972, 0.2058545008943415, 0.024218596233971684, -0.14724760891710761], [0.2935421643651503, -0.014371528781393026, -0.13208832794126726, -0.28851427814627745, 0.31229687248296867], [-0.05878095482332587, 0.2010799473546681, -0.0993239303977421, -0.36374130376619973, -0.10390512875043066], [-0.3638894174134053, 0.24823022759739236, 0.35756280055745404, 0.3161389307487708, 0.06800405499534964], [-0.17999477071232264, 0.914206457241969, -2.0384440164452853, 0.5199594393753192, -0.10637382132783658], [-0.06287809981010109, -0.11878006735535517, -0.09201267113999129, -0.015540835345834659, 0.34144413668321094], [0.27919416358592447, -0.34244818621668677, 0.12888247068635483, 0.2790712788778558, -0.15159311506268625], [-0.2563635395706565, -0.10577269500886423, 0.2843847209963774, -0.27100746951698423, 0.038671251860931066], [0.01742338773266033, -0.3221338874213334, 0.08309106630411023, -0.23884771393496756, 0.31316857296361306], [-0.07156275338444604, -0.7806994769427418, 1.2468637846289474, 0.2583484216833918, -0.15448470604195297], [-0.23757481720956494, -0.22886794585356013, 1.1118712473054688, 0.3914896085229147, -0.26983275117669503], [-0.25014280321476956, 0.33433083760525445, -0.1548076788073014, -0.0663289479662007, 0.08757456191416864], [0.06350374508081867, 1.3450313695416365, -1.6679274058962077, 0.003339074284405499, 0.19675625658339801], [-1.2676037547461227, 0.9231343712926577, -0.630850259510478, -0.6216136411112253, 0.20731088956855878], [0.1529443756038818, -0.08286967322959174, -0.32909902457803475, -0.17358741477544273, 0.10940310776706465], [0.7046027417976485, 1.3395824233604137, 0.24830176106316298, 0.08370281013984324, -0.19104372314381887], [1.6703088171753602, -2.3235474702997165, 0.12059064516298312, 2.7086027799159407, 0.10827128826653942]], [[2.1644581890130503, 0.13353208160229882, 0.21350496278266862, 0.6480630163998986], [-1.3954067764024347, -0.5832179850511183, 0.4758692987236252, -0.8055322211610434], [1.589257849639544, -0.27087730289150785, -1.9712496115182507, 2.4389530246195736], [2.8648431679576913, -0.08547149064479252, 1.10529674028971, 0.3635761352583198], [-0.31351253137424484, 0.21369878794531064, -0.035922291952595574, -0.2771337942546268]], [[-5.915860276800064, -3.404797840361064, -1.0238492771791876, 2.521594120122528, 1.9410799903040064, 2.9970113310828], [-0.15576885725494014, -0.1435983838787508, 0.42533471253356236, 0.001228440836543644, 0.22180562530274794, -0.6132632435857919], [2.395758402340087, 2.0798305378910813, 1.0122777720118277, -2.185602988452941, -1.4820667319473928, -3.2308231083717023], [-1.9045007147566257, -1.5881271194785345, 1.3832521211396942, -1.5115236902161429, -0.16730623867114794, 1.3206824015949032]]];
        const bias = [[-1.4031563740888433, 1.9680829696242415, -2.1684772482193733, -0.4220886432746997, -0.04151573480199159], [-0.9909943334895941, -0.07782299613645761, 1.679994090291464, -0.5426117221008456], [-0.24727078977778846, 2.8118195401093735, 2.3101409843375795, -0.3449147698337949, -1.083636832385673, -2.770636214185344]];

        // Prediction:
        var clf = new MLPClassifier('relu', 'softmax', layers, weights, bias);
        var prediction = clf.predict(features);
        console.log(prediction);

    }
}