const express = require("express");

const router = express.Router();

var MLPClassifier = function (hidden, output, layers, weights, bias) {

  this.hidden = hidden.toUpperCase();
  this.output = output.toUpperCase();
  this.network = new Array(layers.length + 1);
  for (var i = 0, l = layers.length; i < l; i++) {
    this.network[i + 1] = new Array(layers[i]).fill(0.);
  }
  this.weights = weights;
  this.bias = bias;

  var compute = function (activation, v) {
    switch (activation) {
      case 'LOGISTIC':
        for (var i = 0, l = v.length; i < l; i++) {
          v[i] = 1. / (1. + Math.exp(-v[i]));
        }
        break;
      case 'RELU':
        for (var i = 0, l = v.length; i < l; i++) {
          v[i] = Math.max(0, v[i]);
        }
        break;
      case 'TANH':
        for (var i = 0, l = v.length; i < l; i++) {
          v[i] = Math.tanh(v[i]);
        }
        break;
      case 'SOFTMAX':
        var max = Number.NEGATIVE_INFINITY;
        for (var i = 0, l = v.length; i < l; i++) {
          if (v[i] > max) {
            max = v[i];
          }
        }
        for (var i = 0, l = v.length; i < l; i++) {
          v[i] = Math.exp(v[i] - max);
        }
        var sum = 0.0;
        for (var i = 0, l = v.length; i < l; i++) {
          sum += v[i];
        }
        for (var i = 0, l = v.length; i < l; i++) {
          v[i] /= sum;
        }
        break;
    }
    return v;
  };

  this.predict = function (neurons) {
    this.network[0] = neurons;

    for (var i = 0; i < this.network.length - 1; i++) {
      for (var j = 0; j < this.network[i + 1].length; j++) {
        this.network[i + 1][j] = this.bias[i][j];
        for (var l = 0; l < this.network[i].length; l++) {
          this.network[i + 1][j] += this.network[i][l] * this.weights[i][l][j];
        }
      }
      if ((i + 1) < (this.network.length - 1)) {
        this.network[i + 1] = compute(this.hidden, this.network[i + 1]);
      }
    }
    this.network[this.network.length - 1] = compute(this.output, this.network[this.network.length - 1]);

    if (this.network[this.network.length - 1].length == 1) {
      if (this.network[this.network.length - 1][0] > .5) {
        return 1;
      }
      return 0;
    } else {
      var classIdx = 0;
      for (var i = 0, l = this.network[this.network.length - 1].length; i < l; i++) {
        classIdx = this.network[this.network.length - 1][i] > this.network[this.network.length - 1][classIdx] ? i : classIdx;
      }
      return classIdx;
    }

  };

};

router.get("/", function (req, res) {
  res.render("home/app");
});

router.get("/pred", function (req, res) {
  res.render("home/index");
});


router.post("/", function (req, res) {
  console.log(req.body);      // your JSON
  var hora = parseInt(req.body.time.replace(":", "")) / 2359;
  var codDane = 0.0000105516397248132 * (parseInt(req.body.muni) - 5001)
  var barrio = parseInt(req.body.barrio)
  var edad = parseInt(req.body.age)
  var dia = parseInt(req.body.day)
  var movila = parseInt(req.body.movila)
  var movilv = parseInt(req.body.movilv)
  var sexo = parseInt(req.body.sex)
  var features = [hora, barrio, codDane, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, edad]
  features[67 + sexo] = 1
  features[3 + dia] = 1
  features[36 + movila] = 1
  features[51 + movilv] = 1
  var clase = ["Amenaza", "Homicidio", "Hurto", "Hurto_Vehi", "Hurto_Moto", "Lesiones_acc"]
  const layers = [5, 4, 6];
  const weights = [[[-0.6833493774265691, -6.8775259365786665, -2.2736921587506995e-274, 1.05105669939702, -4.397358159e-314], [0.8577955270220016, -0.00805219891586985, -1.0653551374101777e-280, 0.20286408932767333, -4.398887818e-314], [-0.18727571310512328, 0.0031058542838484633, -4.082999315590484e-278, 0.6198595636025044, -4.4048978064e-314], [0.620895457278191, 0.34260082522142865, -1.7647590972862954e-284, 0.16125792522609902, -4.3847563705e-314], [0.6157393640442238, 0.3366682559825571, -9.461531073398166e-292, 0.08426118187128806, -4.4153384174e-314], [0.6032846783107573, 0.3398874279803414, -4.3756536735e-314, 0.09405892193043175, -4.39639564e-314], [0.6346060531404654, 0.3300195818203785, 9.342477082696818e-272, 0.07743033272104766, -4.4004607332e-314], [0.6052903902027331, 0.3383961410457887, -1.2847566688165885e-272, 0.10730487527602181, -4.420933296e-314], [0.6484384677665755, 0.34768888359892036, 1.1545664926811077e-285, 0.1523028158630262, 4.4134309604e-314], [0.7149215547599488, 0.359583739601279, -2.1143985909953917e-280, 0.34722252532591374, -4.392162454e-314], [2.0685225647809906, 0.7325453224389421, -1.6531784969465086e-294, -1.654834072638963, -4.402491509e-314], [0.33396294167825186, 0.6338105118437058, -4.4092415367e-314, -0.4030188428565122, 4.3952279694e-314], [-0.6605310553646566, 0.667984648038876, 3.500838217591542e-271, -0.08998522945272165, -4.4016256215e-314], [2.46005442477637, 0.686893653856831, 2.953820058783649e-273, -0.4987363906871893, 4.375099055e-314], [1.378113734297807, 0.7178260707618075, -5.432091309165311e-286, -1.6657331737760341, -4.3930191086e-314], [0.5374889603485371, -1.176168439355303, -4.380933235e-314, -1.024972525144743, -4.4061153106e-314], [5.663416716699718, 1.1764268717851756, -4.376608224e-314, -0.7259725759393102, -4.322727148e-314], [4.788422585881812, 0.47970268527996124, -4.324527476e-314, -0.6165544116029639, -4.4117297936e-314], [4.727423977851003, -0.6877862453715485, -4.3860187755e-314, -0.49534187698372534, 4.4003739674e-314], [4.8496359500803825, -0.4166204139368129, 4.419694543e-314, -0.4120074004916309, -4.378312553e-314], [3.4672911846522707, -1.8442642977532686, 4.37858006e-314, -2.262712963238108, -4.3995797944e-314], [4.617710429349205, 0.17845270252792278, 4.3985198853e-314, -0.5127878355031479, -4.418426952e-314], [4.462771448730329, -0.5045716981978416, -4.3802890685e-314, -0.6904864573322194, 4.404115143e-314], [4.175296963418711, -0.23368260384673345, -4.423417379e-314, -0.9343446314031209, -4.4021262325e-314], [4.409216367e-314, 4.3751501534e-314, 4.390465461e-314, -4.3943063037e-314, -4.421596308e-314], [3.51846451535435, -0.9998065279528043, 4.4205299486e-314, -1.9894001419844165, 4.4184299877e-314], [3.5403646093527548, -1.3502403087087305, 4.3852414244e-314, -0.9959144327712509, 4.3894069433e-314], [4.3802759145e-314, -4.3766507216e-314, -4.39201776e-314, 4.403917327e-314, -4.4226870787e-314], [3.3680033292526246, -1.2037461353286656, 4.3879304063e-314, -0.8827734450206867, -4.4049167785e-314], [1.097761860655534, -0.7107052489233581, -4.3807896795e-314, 2.451715446322883, 4.3958403894e-314], [0.9812779596027066, 4.47293327728174e-19, -4.3919145517e-314, -1.4521949574888948, 4.410050255e-314], [2.091049111520733, 2.004818946024375e-173, 4.376124182e-314, -1.8975876465504402, -4.3943456393e-314], [4.404420215e-314, -4.402426751e-314, 4.4102489563e-314, -4.393540589e-314, -4.4051427997e-314], [-1.5448098150851104, -0.24045946223102585, -4.403139091e-314, 1.0415418540777535, 4.416818496e-314], [-2.5871022965530175, 6.551174228839641e-68, 4.387916367e-314, 4.863881976921044, 4.402936089e-314], [-3.2268116413425556, 0.7772628693270888, -4.4111115554e-314, 4.449995840935094, 4.3914590943e-314], [-3.6330299902135614, 6.809124894605241e-193, -4.398805985e-314, 4.016352008759814, 4.4082775e-314], [0.8758929460243379, 0.5896843072283937, 4.301513966965654e-271, 0.42087502033030844, 4.40048097e-314], [0.38968934951119805, 0.5505665569387477, 4.4217026786e-314, -0.38085387599719184, -4.3836901373e-314], [1.2360863420396455, 0.6086460773761723, 4.4044524675e-314, 0.04360637868920193, 4.4124726153e-314], [0.5742233693764864, 0.38720299509123596, -4.389650166e-314, -0.41012633095747364, 4.41651178e-314], [-0.40694623260204427, 0.1937309123114006, -4.400210554e-314, -0.2271573736444296, -4.3943012445e-314], [0.36534620474637813, 0.4539001256506446, -4.3994659617e-314, -0.39721133521216456, -4.4203241643e-314], [1.5845595400288466, 0.5937405705740584, 4.42267696e-314, -1.0160894597554115, -4.3777299824e-314], [1.0819020051042536, 0.6065389340218041, 4.4062549454e-314, -0.9416955516497378, -4.3826037937e-314], [-0.10126268961094648, -0.9950714185209566, 4.3987583016e-314, 0.16049104695475674, 4.406653866e-314], [0.8342272784740269, 0.5539416767265738, -4.414954295e-314, -0.391864974744123, -4.3778860597e-314], [0.9180209635637573, 0.7168137638290407, -4.416062773e-314, -0.11335273557500594, 4.413893374e-314], [1.5776366764694514, 0.5841234347361445, -4.4030740796e-314, -2.7543949390440807e-118, 4.375444727e-314], [1.3415227982945805, 0.6706134417352327, -4.3949920827e-314, 0.21543004268457358, -4.398329152e-314], [-0.5428437305040535, 3.208308883066307e-102, 4.415850791e-314, 1.5462537736521473, -4.393965438e-314], [0.4477716655772615, 2.9714454080795415e-41, -4.3988932566e-314, -4.515275454137486e-234, -4.384097026e-314], [0.9729826042737397, 0.6026549230181403, 1.7015321687172097e-270, 0.259949806699258, 4.3978978527e-314], [1.0141685895952555, 0.493463483000333, 4.378580945e-314, 1.856423521756806, 4.3980927596e-314], [0.6255939625111931, -0.10952068667827429, -4.405450148e-314, -1.6271494939621505, -4.4153920453e-314], [0.15377687419322406, -0.20324576729046123, -4.3812369156e-314, -3.624265372570654, 4.4152974376e-314], [0.23973466019517833, 0.3151918743057264, 4.4032300305e-314, -1.5691151615952417, 4.4242932584e-314], [0.6237091803602226, 0.542794056882061, 4.3929202006e-314, 0.5876175537881315, 4.3992260276e-314], [0.8176174567103123, 0.607744009141816, 4.423666799e-314, -0.8233755376884697, 4.408908007e-314], [1.432282889777892, 0.6377361196660827, 4.3842070644e-314, -2.3733003097087924, -4.4030738267e-314], [1.1216054575872991, 0.5891559526858633, -4.412403304e-314, -1.47221823323641, 4.3776600385e-314], [2.3641994976155813, 0.6776236523577241, 4.416923475e-314, -1.5938431393613948, 4.4176186134e-314], [0.9034607654052539, 0.5864190929093462, 4.4000165327e-314, -1.6978811793091069, -4.3849551984e-314], [2.5970915990595143, 0.5872300968172204, 4.384163808e-314, 0.591686286539514, 4.4019891273e-314], [1.8778307857023258, 0.5473539578149622, -4.396523133e-314, -1.809642720307914, 4.4038224666e-314], [1.0852341005129855, 0.7460690431919457, 4.4001756455e-314, -1.1619034962299377, -4.4140384477e-314], [1.8552978258513577, 0.6198738512870923, 4.412226863e-314, -1.7123069942794211, -4.383322331e-314], [1.2840874362156083, 0.4599267115214142, -1.4817599256268988e-279, 0.6389507295791711, -4.398018136e-314], [0.919554881459144, 0.46925588403350904, -3.7813130851743847e-271, 0.09888031420010307, -4.4110055645e-314], [4.414844763e-314, 4.387341638e-314, -4.410038113e-314, -4.422289676e-314, 4.3975485127e-314], [-0.0012398805795015638, -0.0018228043630885067, -1.5095676858371484e-279, -0.006148049732418858, -4.4232554834e-314]], [[0.4471041817067921, -7.435959997270432e-299, -4.3184724313093155e-232, 1.3844601588418344], [13.052599507294966, 9.431240959259724e-282, 5.025672480301357e-237, -2.310133213852127], [-4.407662171e-314, -4.3931285145e-314, 4.414441795e-314, -2.8718190511340774e-276], [-0.5827728309096479, -4.3811753195e-314, -1.5491071373541824e-238, -0.02263120282231612], [-4.377121989e-314, -4.3921611893e-314, 4.3839264035e-314, 4.3998781627e-314]], [[1.099904363695739, 1.2884552465602033, -0.9031831954133309, -4.188850711296646, 1.0878813830444631, -3.656972481340179], [3.2431948575456683e-299, -4.363751956e-314, 3.5149644774276877e-298, 2.395402967528255e-305, 1.4304832626245e-311, 4.4116890667e-314], [1.2515793089318644e-251, -1.1304475321453713e-260, 2.7324100004200875e-262, -6.985376111117764e-259, 3.2397473135275726e-250, -9.360102861857182e-262], [-2.5076459236848105, -0.39389019095987027, -0.03371884141978682, 1.188281399931557, -1.6861409659403241, -1.15375433275307]]];
  const bias = [[1.5252783259248845, 0.6998792186297506, -0.21423196593650307, 0.2611281570952467, -0.10379073542997866], [0.9220342047094882, -0.35723011947329125, -0.6344030737537659, 1.6212858850655012], [6.741134387913518, -11.54223330182336, -0.795288507099331, -5.449554604420343, 2.8580161763402985, 11.662602239765167]];
  var clf = new MLPClassifier('relu', 'softmax', layers, weights, bias);
  var arma = ["ARMA BLANCA / CORTOPUNZANTE","SIN EMPLEO DE ARMAS","NO REPORTADO","ARMA DE FUEGO","CONTUNDENTES","ESCOPOLAMINA","CUERDA/SOGA/CADENA","BOLSA PLASTICA","CINTAS/CINTURON","ARTEFACTO EXPLOSIVO/CARGA DINAMITA","GRANADA DE MANO","COMBUSTIBLE","ALMOHADA","ARTEFACTO INCENDIARIO","MINA ANTIPERSONA","SUSTANCIAS TOXICAS","MOTO BOMBA","PRENDAS DE VESTIR","QUIMICOS","LLAVE MAESTRA","PERRO","PALANCAS","JERINGA","-","VEHICULO","MOTO","BICICLETA"]
  var response = {"Amenaza":[], "Homicidio":[], "Hurto":[], "Hurto_Vehi":[], "Hurto_Moto":[], "Lesiones_acc":[]}
  for (var i = 10; i < 36; i++) {
    var array = features.slice(0)
    array[i] = 1
    prediction = clf.predict(array);
    response[clase[prediction]].push(arma[i-10])
    console.log(i+" "+prediction + " " + clase[prediction]);
  }
  res.render("home/result", {data: response});    // echo the result back
})

module.exports = router;
